#DEFINITIONS:  -*-sh-*-
#
# This control file demonstrates a simple ARTS 1D clear sky calculation.
# Calculation of brightness temperature and optical depth as an auxilary variable is included. 
#
# You can choose different species and change the sensor position and sensor line of soght (los)

Arts2 {

INCLUDE "general/general.arts"
INCLUDE "general/continua.arts"
INCLUDE "general/agendas.arts"
INCLUDE "general/planet_earth.arts"

# Agenda for scalar gas absorption calculation
Copy(abs_xsec_agenda, abs_xsec_agenda__noCIA )

# standard emission agenda
Copy( iy_main_agenda, iy_main_agenda__Emission )

# cosmic background radiation
Copy( iy_space_agenda, iy_space_agenda__CosmicBackground )

# standard surface agenda (i.e., make use of surface_rtprop_agenda)
Copy( iy_surface_agenda, iy_surface_agenda__UseSurfaceRtprop )

# on-the-fly absorption
Copy( propmat_clearsky_agenda, propmat_clearsky_agenda__OnTheFly )

# sensor-only path
Copy( ppath_agenda, ppath_agenda__FollowSensorLosPath )

# no refraction
Copy( ppath_step_agenda, ppath_step_agenda__GeometricPath )

# Number of Stokes components to be computed
IndexSet( stokes_dim, 1 )

#########################################################################

# Definition of absorption species
abs_speciesSet(species=[
    "H2O, H2O-SelfContCKDMT252, H2O-ForeignContCKDMT252",
    "O2-TRE05",
    "N2, N2-CIAfunCKDMT252, N2-CIArotCKDMT252"
    ]
)

# Read a line file and a matching small frequency grid
abs_linesReadFromSplitArtscat(
    abs_lines,
    abs_species,
    "HitranSplit/",
    1,
    200e9
    )

# Sort the line file according to species
abs_lines_per_speciesCreateFromLines

# Non reflecting surface
VectorSetConstant( surface_scalar_reflectivity, 1, 0.4 )
Copy( surface_rtprop_agenda, surface_rtprop_agenda__Specular_NoPol_ReflFix_SurfTFromt_surface )

# Create a frequency grid
ReadXML(f_grid, "input/f_grid.xml")

# No sensor properties
sensorOff

# We select here to use Planck brightness temperatures
StringSet( iy_unit, "PlanckBT" )

#########################################################################

# Atmosphere and surface
AtmosphereSet1D
ReadXML( atm_fields_compact, "input/x_apriori.xml" )
atm_fields_compactAddConstant( atm_fields_compact, "abs_species-N2", 0.78 )
atm_fields_compactAddConstant( atm_fields_compact, "abs_species-O2", 0.21 )
AtmFieldsFromCompact

Extract( z_surface, z_field, 0 )
Extract( t_surface, t_field, 0 )

# Definition of sensor position and line of sight (LOS)
MatrixSet( sensor_pos, [10e3])
MatrixSet( sensor_los, [0] )
sensorOff

#Jacobian calculation
jacobianInit
VectorCreate( g1 )
VectorCreate( g2 )
VectorCreate( g3 )

jacobianAddAbsSpecies(
    g1=p_grid, g2=lat_grid, g3=lon_grid,
    species="H2O, H2O-SelfContCKDMT252, H2O-ForeignContCKDMT252",
    method="analytical",
    unit="vmr",
)
jacobianClose

# Clearsky = No scattering
cloudboxOff

# Perform RT calculations
abs_xsec_agenda_checkedCalc
propmat_clearsky_agenda_checkedCalc
atmfields_checkedCalc
atmgeom_checkedCalc
cloudbox_checkedCalc
sensor_checkedCalc

yCalc

# Write output
WriteXML( "ascii", jacobian, "results/jacobian.xml" )
WriteXML( "ascii", z_field, "results/z_field.xml" )
WriteXML( "ascii", y, "results/y_apriori.xml" )
}
